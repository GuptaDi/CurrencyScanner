"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
require('core-js/es6/reflect');
var core_1 = require('@angular/core');
var MetadataFactory_1 = require('./MetadataFactory');
var MetadataHelper_1 = require('./MetadataHelper');
describe('MetadataHelper', function () {
    describe('Checking the MetadataHelper functionality', function () {
        it('MetadataHelper should work correctly', function () {
            var ViewFieldMetadata = (function () {
                function ViewFieldMetadata(config) {
                    this.configValue = config.configValue;
                }
                return ViewFieldMetadata;
            }());
            var ViewField = MetadataFactory_1.PropertyAnnotationFactory(ViewFieldMetadata);
            var View = (function () {
                function View() {
                }
                __decorate([
                    ViewField({ configValue: 100 }), 
                    __metadata('design:type', String)
                ], View.prototype, "field1", void 0);
                __decorate([
                    ViewField({ configValue: 200 }), 
                    __metadata('design:type', Number)
                ], View.prototype, "field2", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Number)
                ], View.prototype, "field3", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Number)
                ], View.prototype, "field4", void 0);
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', Number)
                ], View.prototype, "field5", void 0);
                View = __decorate([
                    core_1.Component({
                        template: '<div>Template</div>'
                    }), 
                    __metadata('design:paramtypes', [])
                ], View);
                return View;
            }());
            var viewInstance = new View();
            expect(Object.keys(MetadataHelper_1.MetadataHelper.findPropertyMetadata(viewInstance, ViewField))).toEqual(['field1', 'field2']);
            expect(Object.keys(MetadataHelper_1.MetadataHelper.findPropertyMetadata(viewInstance, core_1.Input))).toEqual(['field3', 'field4']);
            expect(Object.keys(MetadataHelper_1.MetadataHelper.findPropertyMetadata(viewInstance, core_1.Output))).toEqual(['field5']);
            var annotationMetadataHolder = MetadataHelper_1.MetadataHelper.findPropertyMetadata(viewInstance, ViewField);
            expect(Reflect.get(Reflect.get(annotationMetadataHolder, 'field1'), 'configValue')).toBe(100);
            expect(Reflect.get(Reflect.get(annotationMetadataHolder, 'field2'), 'configValue')).toBe(200);
            expect(Reflect.get(MetadataHelper_1.MetadataHelper.findAnnotationsMetaData(View, core_1.Component)[0], 'template')).toEqual('<div>Template</div>');
            var WithoutAnnotations = (function () {
                function WithoutAnnotations() {
                }
                return WithoutAnnotations;
            }());
            expect(MetadataHelper_1.MetadataHelper.findAnnotationsMetaData(WithoutAnnotations, core_1.Component).length).toBe(0);
        });
    });
});
//# sourceMappingURL=MetadataHelper.spec.js.map