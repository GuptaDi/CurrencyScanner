import { Compiler, ElementRef, OnChanges, ViewContainerRef, Type } from '@angular/core';
import { Http } from '@angular/http';
import { IComponentRemoteTemplateFactory } from './IComponentRemoteTemplateFactory';
export declare class DynamicComponentMetadata {
    selector: string;
    template: string;
    constructor(selector?: string, template?: string);
}
export interface IComponentInputData {
    [index: string]: any;
}
export declare class DynamicComponent<TDynamicComponentType> implements OnChanges {
    protected element: ElementRef;
    protected viewContainer: ViewContainerRef;
    protected compiler: Compiler;
    protected http: Http;
    componentType: {
        new (): TDynamicComponentType;
    };
    componentTemplate: string;
    componentInputData: IComponentInputData;
    componentTemplateUrl: string;
    componentRemoteTemplateFactory: IComponentRemoteTemplateFactory;
    componentModules: Array<any>;
    private componentInstance;
    protected destroyWrapper: boolean;
    constructor(element: ElementRef, viewContainer: ViewContainerRef, compiler: Compiler, http: Http);
    /**
     * @override
     */
    ngOnChanges(): void;
    protected getComponentTypePromise(): Promise<Type<any>>;
    protected loadRemoteTemplate(url: string, resolve: (value: Type<any>) => void): void;
    protected makeComponentModule(template: string, componentType?: {
        new (): TDynamicComponentType;
    }): Type<any>;
    protected makeComponent(template: string, componentType?: {
        new (): TDynamicComponentType;
    }): Type<TDynamicComponentType>;
    protected applyPropertiesToDynamicComponent(instance: TDynamicComponentType): void;
}
